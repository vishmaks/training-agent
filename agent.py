import streamlit as st
import tempfile
from langchain.chains import RetrievalQA
from langchain_community.document_loaders import PyPDFLoader, Docx2txtLoader, TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_together import Together
from langchain_community.embeddings import HuggingFaceEmbeddings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–≥–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏–Ω–≥–∞", page_icon="ü§ñ")

st.title("ü§ñ –ê–≥–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏–Ω–≥–∞ (–ë–ï–°–ü–õ–ê–¢–ù–û —á–µ—Ä–µ–∑ TogetherAI)")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, DOCX, TXT), –∏ –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–µ–π—Å–∞.")

# –í–≤–æ–¥ API-–∫–ª—é—á–∞ TogetherAI
api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ TogetherAI API Key", type="password")

if api_key:
    uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫–µ–π—Å–∞", type=["pdf", "docx", "txt"])

    if uploaded_file:
        with tempfile.NamedTemporaryFile(delete=False, suffix="." + uploaded_file.name.split('.')[-1]) as tmp_file:
            tmp_file.write(uploaded_file.getbuffer())
            tmp_path = tmp_file.name

        file_type = uploaded_file.name.split('.')[-1].lower()

        if file_type == "pdf":
            loader = PyPDFLoader(tmp_path)
        elif file_type == "docx":
            loader = Docx2txtLoader(tmp_path)
        else:
            loader = TextLoader(tmp_path)

        documents = loader.load()

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        texts = text_splitter.split_documents(documents)

        # –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (—á–µ—Ä–µ–∑ HuggingFace ‚Äì –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        embeddings = HuggingFaceEmbeddings()
        vectordb = Chroma.from_documents(texts, embeddings)

        # LLM —á–µ—Ä–µ–∑ TogetherAI
        llm = Together(
            together_api_key=api_key,
            model="mistralai/Mixtral-8x7B-Instruct-v0.1",
            temperature=0.2,
        )

        qa_chain = RetrievalQA.from_chain_type(
            llm=llm,
            retriever=vectordb.as_retriever(search_kwargs={"k": 2}),
            chain_type="stuff"
        )

        st.success("‚úÖ –ö–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∫–µ–π—Å—É")

        if question:
            answer = qa_chain.run(
                f"–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ–π—Å–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏ '–í –∫–µ–π—Å–µ —ç—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'. –í–æ–ø—Ä–æ—Å: {question}"
            )
            st.markdown(f"### üí° –û—Ç–≤–µ—Ç:\n{answer}")

    else:
        st.info("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, DOCX –∏–ª–∏ TXT), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
else:
    st.warning("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á TogetherAI –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
