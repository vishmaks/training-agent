import streamlit as st
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings, OpenAI
from langchain.chains import RetrievalQA

# –ö–µ—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
@st.cache_resource
def load_vector_db():
    embeddings = OpenAIEmbeddings()
    return FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
vectordb = load_vector_db()

# –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
qa_chain = RetrievalQA.from_chain_type(
    llm=OpenAI(temperature=0),
    retriever=vectordb.as_retriever(),
    return_source_documents=True
)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üí¨ –¢—Ä–µ–Ω–∏–Ω–≥-–∞–≥–µ–Ω—Ç")
question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–µ–π—Å—É:")

if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
    if question.strip():
        result = qa_chain.invoke(
            {"query": f"–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ–π—Å–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏ '–í –∫–µ–π—Å–µ —ç—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'. –í–æ–ø—Ä–æ—Å: {question}"}
        )
        st.write("### –û—Ç–≤–µ—Ç:")
        st.write(result["result"])
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
